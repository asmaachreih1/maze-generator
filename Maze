#include <iostream>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include <utility>
#include <queue>
#include <unordered_map>
#include <cmath>
#include <limits>
#include <SFML/Graphics.hpp>



class Node {
public:
    int x, y;
    int G, H;
    Node *parent;
    Node(int x, int y, Node *parent = nullptr) : x(x), y(y), G(0), H(0), parent(parent) {}
    int getScore() const {
        return G + H;
    }
};

class NodeComparer {
public:
    bool operator()(const Node* lhs, const Node* rhs) const {
        return lhs->getScore() > rhs->getScore();
    }
};

class Maze{
private:
    std::vector<std::vector<char>> grid;
    std::vector<std::pair<int, int>> walls;
    int width, height;
    std::random_device rd;
    std::mt19937 gen;
    std::pair<int, int> start, end;

public:
    Maze(int w, int h) : width(w), height(h), gen(rd()){
        initialize();
    }
    ~Maze() {
        for (auto &row : grid) {
            row.clear();
        }
        grid.clear();
        walls.clear();
    }
    void initialize(){
        grid.assign(height, std::vector<char>(width, '1')); 

        std::uniform_int_distribution<> distrX(1, width - 2);
        std::uniform_int_distribution<> distrY(1, height - 2);

        int startX = distrX(gen);
        int startY = distrY(gen);
        setPass(startX, startY);
        addWalls(startX, startY);
        while (!walls.empty()){
            std::uniform_int_distribution<> distr(0, walls.size() - 1);
            int wallIndex = distr(gen);
            auto [wallX, wallY] = walls[wallIndex];
            if (isValidWall(wallX, wallY)) {
                setPass(wallX, wallY);
                addWalls(wallX, wallY);
            }
            walls.erase(walls.begin() + wallIndex);
        }
        start = {1, 0};
        end = {width - 2, height - 1};
        grid[start.second][start.first] = 'S'; // Start
        grid[end.second][end.first] = 'E'; // End
    }
    void addWalls(int x, int y){
        if (x > 1 && grid[y][x - 2] == '1' && grid[y][x - 1] == '1') walls.emplace_back(x - 1, y);
        if (x < width - 2 && grid[y][x + 2] == '1' && grid[y][x + 1] == '1') walls.emplace_back(x + 1, y);
        if (y > 1 && grid[y - 2][x] == '1' && grid[y - 1][x] == '1') walls.emplace_back(x, y - 1);
        if (y < height - 2 && grid[y + 2][x] == '1' && grid[y + 1][x] == '1') walls.emplace_back(x, y + 1);
    }
    bool isValidWall(int x, int y){
        int paths = 0;
        if (x > 0 && grid[y][x - 1] == '0') paths++;
        if (x < width - 1 && grid[y][x + 1] == '0') paths++;
        if (y > 0 && grid[y - 1][x] == '0') paths++;
        if (y < height - 1 && grid[y + 1][x] == '0') paths++;
        return paths == 1;
    }
    void setPass(int x, int y){
        if (x >= 0 && x < width && y >= 0 && y < height) {
            grid[y][x] = '0';
        }
    }

    std::vector<std::pair<int, int>> findPathAStar(){
        std::priority_queue<Node*, std::vector<Node*>, NodeComparer> openList;
        std::unordered_map<int, Node*> allNodes;
        std::set<int> closedSet;
        auto toIndex = [this](int x, int y) { return y * width + x; };
        Node *startNode = new Node(start.first, start.second);
        Node *endNode = new Node(end.first, end.second);
        startNode->H = heuristic(start.first, start.second);
        allNodes[toIndex(startNode->x, startNode->y)] = startNode;
        openList.push(startNode);
        std::vector<std::pair<int, int>> path;
        bool pathFound = false;

        while (!openList.empty()){
            Node *currentNode = openList.top();
            openList.pop();
            int currentIndex = toIndex(currentNode->x, currentNode->y);

            if (currentNode->x == endNode->x && currentNode->y == endNode->y){
                while (currentNode != nullptr) {
                    path.emplace_back(currentNode->x, currentNode->y);
                    currentNode = currentNode->parent;
                }
                pathFound = true;
                break;
            }

            closedSet.insert(currentIndex);

            for (int dx = -1; dx <= 1; ++dx) {
                for (int dy = -1; dy <= 1; ++dy) {
                    if (dx == 0 && dy == 0) continue; 
                    int newX = currentNode->x + dx;
                    int newY = currentNode->y + dy;
                    int neighborIndex = toIndex(newX, newY);

                    if (newX < 0 || newX >= width || newY < 0 || newY >= height || grid[newY][newX] == '1' || closedSet.find(neighborIndex) != closedSet.end()) {
                        continue;
                    }

                    int tentative_gScore = currentNode->G + 1;

                    if (!allNodes.count(neighborIndex)) { 
                        Node *successor = new Node(newX, newY, currentNode);
                        successor->G = tentative_gScore;
                        successor->H = heuristic(newX, newY);
                        openList.push(successor);
                        allNodes[neighborIndex] = successor;
                    } else if (tentative_gScore < allNodes[neighborIndex]->G) { 
                        allNodes[neighborIndex]->parent = currentNode;
                        allNodes[neighborIndex]->G = tentative_gScore;
                    }
                }
            }
        }

        if (pathFound){
            std::reverse(path.begin(), path.end());
        } else {
            std::cout << "No path found!" << std::endl;
        }

        for (auto &nodePair : allNodes) {
            delete nodePair.second;
        }
        delete endNode;
        return path;
    }

    void printMaze(){
        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                if (x == start.first && y == start.second) {
                    std::cout << 'S'; 
                } else if (x == end.first && y == end.second) {
                    std::cout << 'E'; 
                } else {
                    std::cout << grid[y][x]; 
                }
                std::cout << ' ';
            }
            std::cout << std::endl;
        }
    }

    void printPath(const std::vector<std::pair<int, int>>& path){
        std::vector<std::vector<char>> mazeCopy = grid;

        for (const auto& p : path){
            if (mazeCopy[p.second][p.first] != 'S' && mazeCopy[p.second][p.first] != 'E') {
                mazeCopy[p.second][p.first] = '.';
            }
        }
        for (int y = 0; y < height; ++y){
            for (int x = 0; x < width; ++x) {
                std::cout << mazeCopy[y][x] << ' ';
            }
            std::cout << std::endl;
        }
    }
    int heuristic(int x, int y) {
        return std::sqrt((x - end.first) * (x - end.first) + (y - end.second) * (y - end.second));
    }
    void draw(sf::RenderWindow &window) {
    sf::RectangleShape cell(sf::Vector2f(20, 20)); 
    for (int y = 0; y < height; ++y) {
        for (int x = 0; x < width; ++x) {
            if (grid[y][x] == '1') {
                cell.setFillColor(sf::Color::Black);
            } else if (grid[y][x] == '0' || grid[y][x] == '.') {
                cell.setFillColor(sf::Color::White);
            }
            if (grid[y][x] == 'S') {
                cell.setFillColor(sf::Color::Green);
            }
            if (grid[y][x] == 'E') {
                cell.setFillColor(sf::Color::Red);
            }
            cell.setPosition(x * 20, y * 20);
            window.draw(cell);
        }
    }
}
};

int main(){
    int w, h;
    std::cout << "Enter the width of the maze: ";
    std::cin >> w;
    std::cout << "Enter the height of the maze: ";
    std::cin >> h;
    Maze maze(w, h);
    auto path = maze.findPathAStar();

    sf::RenderWindow window(sf::VideoMode(w * 20, h * 20), "Maze Visualizer");
    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }
        window.clear();
        maze.printPath(path);  
        maze.draw(window);
        window.display();
    }
    return 0;
}
