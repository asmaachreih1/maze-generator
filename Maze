#include <vector> 
#include <iostream>
#include <random>
#include <algorithm>
#include <utility>


class Maze{
private:
 std::vector<std::vector<char>> grid;
 std::vector<std::pair<int,int>> walls; 
int width;
int height;
std::random_device rd;
std::mt19937 gen;
std::pair<int,int>start,end;

public:
Maze(int w, int h):width(w), height(h), gen(rd()){
initialize(); }
void initialize(){
grid.assign(height, std::vector<char>(width,'#'));
walls.clear();
std::uniform_int_distribution<> distrX(1, width - 2);
std::uniform_int_distribution<> distrY(1, height - 2);
int startX = distrX(gen);
int startY = distrY(gen);
setPass(startX,startY);
addWalls(startX,startY);

while(!wall.empty()){
std::uniform_int_distribution<>distr(0,walls.size()-1);
int wallIndex=distr(gen);
auto[wallX,wallY]=walls[wallIndex];
if(isValidwall(wallX,wallY)){
setPass(wallX,wallY);
addWalls(wallX,wallY);
}
walls.erase(walls.begin()+wallIndex);}
start={1,0};
end={width-2,height-1};
grid[start.second][start.first]='S';
grid[end.second][end.first]='E';
}
void addWalls(int x, int y) {
if(isValidCell(x-1,y) && grid[y][x-1] == '#') walls.emplace_back(x-1,y);
if(isValidCell(x+1,y) && grid[y][x+1] == '#') walls.emplace_back(x+1,y);
if(isValidCell(x,y-1) && grid[y-1][x] == '#') walls.emplace_back(x,y-1);
if(isValidCell(x,y+1) && grid[y + 1][x] == '#') walls.emplace_back(x,y+1); }

void setPass(int x, int y){
if(x>=0&&x<width&&y>=0&&y<height){
grid[y][x] = ' ';
}
}

void setObstacle(int x, int y){
if(isValidCell(x,y)){
grid[y][x] = '#';
}
}

bool isValidWall(int x, int y){
int paths =0;
if(x>0&&grid[y][x-1]==' ')paths++;
if(x<width -1&&grid[y][x+1]==' ')paths++;
if(y>0&&grid[y-1][x]==' ')paths++;
if(y<height -1&&grid[y+1][x]==' ')paths++;
return paths==1;}

}

void printMaze(){
for(int y = 0; y < height; ++y){
  for(int x = 0; x < width; ++x){
     std::cout <<grid[y][x];
}
std::cout<<std::endl;
}
}
void resizeMaze(int newWidth, int newHeight){
width = newWidth;
height = newHeight;
initialize();
}
};
int main(){
int w, h;
std::cout << "Enter the width of the maze:";
std::cin >> w;
std::cout << "Enter the height of the maze:";
std::cin >> h;

Maze uno(w, h);
uno.setPass(1,1);
uno.setPass(2,1);
uno.setPass(3,1);
uno.setPass(4,1);

uno.setObstacle(2,2);
uno.setObstacle(3,2);

uno.printMaze();

return 0;
}





